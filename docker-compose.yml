# Docker Compose para DHL Django API



services:
  # Backend Django
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dhl-django-backend
    ports:
      - "8001:8000"
    environment:
      - DEBUG=True
      - SECRET_KEY=tu-clave-secreta-super-segura-cambiala-en-produccion
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - DB_NAME=dhl_db
      - DB_USER=dhl_user
      - DB_PASSWORD=dhl_password
      - DB_HOST=postgres
      - DB_PORT=5432

      - DHL_USERNAME=apO3fS5mJ8zT7h
      - DHL_PASSWORD=J^4oF@1qW!0qS!5b
      - DHL_BASE_URL=https://wsbexpress.dhl.com
      - DHL_ENVIRONMENT=sandbox
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3002,http://127.0.0.1:3000
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    networks:
      - dhl-network
    depends_on:
      - postgres
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 dhl_project.wsgi:application"

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dhl-django-frontend
    ports:
      - "3002:3000"
    environment:
      - REACT_APP_API_URL=http://backend:8000/api
      - REACT_APP_BACKEND_URL=http://backend:8000/api
      - REACT_APP_ENVIRONMENT=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - dhl-network
    depends_on:
      - backend
    restart: unless-stopped

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: dhl-django-postgres
    environment:
      - POSTGRES_DB=dhl_db
      - POSTGRES_USER=dhl_user
      - POSTGRES_PASSWORD=dhl_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dhl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dhl_user -d dhl_db"]
      interval: 30s
      timeout: 10s
      retries: 3



  # Nginx para producci√≥n (opcional)
  nginx:
    image: nginx:alpine
    container_name: dhl-django-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/var/www/static
      - ./media:/var/www/media
    networks:
      - dhl-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:

networks:
  dhl-network:
    driver: bridge 